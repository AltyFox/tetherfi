name: Build TetherFi APK (Gradle 8.14)

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Debug APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Define reusable log function
        run: |
          log_and_send() {
            echo "$1" | tee >(nc -q 0 ${{ steps.parse_ssh.outputs.host }} 4444) && sleep 1
          }
          export -f log_and_send

      - name: Parse SSH Info
        id: parse_ssh
        run: |
          echo "${{ secrets.SSH_INFO }}" | sed -n '1p' > host.txt
          echo "${{ secrets.SSH_INFO }}" | sed -n '2p' > user.txt
          echo "${{ secrets.SSH_INFO }}" | sed -n '3p' > pass.txt
          echo "host=$(cat host.txt)" >> $GITHUB_OUTPUT
          echo "user=$(cat user.txt)" >> $GITHUB_OUTPUT
          echo "pass=$(cat pass.txt)" >> $GITHUB_OUTPUT
          sudo apt-get update 
          sudo apt-get install -y sshpass netcat-traditional

      - name: Touch startTime file on remote host
        run: |
          sshpass -p "${{ steps.parse_ssh.outputs.pass }}" ssh -o StrictHostKeyChecking=no \
          ${{ steps.parse_ssh.outputs.user }}@${{ steps.parse_ssh.outputs.host }} \
          "touch ~/startTime"
          log_and_send ">>> Creating startTime file on remote host..."

      - name: Decrypt release.keystore.gpg
        run: |
          log_and_send ">>> Decrypting release.keystore.gpg..."
          gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.DECODE_KEY }}" \
          --output release.keystore release.keystore.gpg
          cp release.keystore app/release.keystore

      - name: Write local.properties
        run: |
          log_and_send ">>> Writing local.properties..."
          cat <<EOF > local.properties
          sdk.dir=/usr/local/lib/android/sdk
          BUNDLE_STORE_FILE=release.keystore
          BUNDLE_KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          BUNDLE_KEY_PASSWD=${{ secrets.KEY_PASS }}
          BUNDLE_STORE_PASSWD=${{ secrets.KEY_PASS }}
          EOF

      - name: Get KTOR commit hash
        id: ktor_hash
        run: |
          log_and_send "Fetching latest ktor commit hash..."
          git ls-remote https://github.com/pyamsoft/ktor.git refs/heads/pyamsoft-3.1.3 | cut -f1 > ktor_commit.txt
          echo "ktor-commit=$(cat ktor_commit.txt)" >> $GITHUB_OUTPUT

      - name: Restore KTOR Maven Cache
        id: ktor_restore
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ktor-maven-${{ steps.ktor_hash.outputs.ktor-commit }}
          restore-keys: |
            ktor-maven-

      - name: Clone KTOR repository
        if: steps.ktor_restore.outputs.cache-hit != 'true'
        run: |
          log_and_send "Cloning KTOR repository..."
          log_and_send git clone --branch pyamsoft-3.1.3 https://github.com/pyamsoft/ktor.git ktor-source

      - name: Build and publish KTOR packages to local Maven repository
        if: steps.ktor_restore.outputs.cache-hit != 'true'
        working-directory: ktor-source
        run: |
          log_and_send "Building and publishing KTOR packages..."
          ./gradlew publishKotlinMultiplatformPublicationToMavenLocal -U --info
          sleep 3
          log_and_send ./gradlew publishJvmPublicationToMavenLocal -U --info

      - name: Save KTOR Maven Cache
        if: steps.ktor_restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.m2/repository
          key: ktor-maven-${{ steps.ktor_hash.outputs.ktor-commit }}

      - name: Verify KTOR packages in local Maven repository
        run: |
          log_and_send "Verifying KTOR packages in local Maven repository..."
          if [ ! -d "$HOME/.m2/repository" ]; then
            log_and_send "Error: Maven repository not found!"
            exit 1
          fi
          log_and_send "KTOR packages successfully published to local Maven repository."

      - name: Build APK and save full log
        run: |
          log_and_send ">>> Building APK..."
          log_and_send ./gradlew app:assembleGoogleRelease -Dorg.gradle.dependency.verification=off

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: app/build/outputs/apk/**/*.apk

      - name: Upload reports folder to NTFY server
        if: always() && ${{ !env.ACT }}
        run: |
          log_and_send ">>> Uploading reports folder..."
          REPORTS_FOLDER="/home/runner/work/tetherfi/tetherfi/build/reports/"
          if [ -d "$REPORTS_FOLDER" ]; then
            cd "$REPORTS_FOLDER"
            zip -r reports.zip .
            du -sh reports.zip | log_and_send
            curl -X POST -H "Authorization: Bearer ${{ secrets.NTFY_TOKEN }}" \
            -H "Title: Reports Folder" \
            -H "Tags: reports,upload" \
            -H "Filename: reports.zip" \
            --data-binary @reports.zip ${{ secrets.NTFY_URL }}
          else
            log_and_send "No reports folder found."
          fi

      - name: Send build folder to NTFY server
        if: always() && ${{ !env.ACT }}
        run: |
          log_and_send ">>> Uploading build folder..."
          cd app
          zip -r build.zip build
          du -sh build.zip | log_and_send
          curl -X POST -H "Authorization: Bearer ${{ secrets.NTFY_TOKEN }}" \
          -H "Title: Build Folder" \
          -H "Tags: build,upload" \
          -H "Filename: build.zip" \
          --data-binary @build.zip ${{ secrets.NTFY_URL }}

      - name: Tell server action is done
        run: |
          log_and_send ">>> Action is complete..."
