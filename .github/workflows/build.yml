name: Build TetherFi APK (Gradle 8.14)

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Debug APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Parse SSH Info
        id: parse_ssh
        run: |
          echo "${{ secrets.SSH_INFO }}" | sed -n '1p' > host.txt
          echo "${{ secrets.SSH_INFO }}" | sed -n '2p' > user.txt
          echo "${{ secrets.SSH_INFO }}" | sed -n '3p' > pass.txt
          echo "host=$(cat host.txt)" >> $GITHUB_OUTPUT
          echo "user=$(cat user.txt)" >> $GITHUB_OUTPUT
          echo "pass=$(cat pass.txt)" >> $GITHUB_OUTPUT
          sudo apt-get update 
          sudo apt-get install -y sshpass netcat-traditional

      - name: Save reusable log command to shell file and manage SSH tunnel
        run: |
          echo '#!/bin/bash' > ~/log_and_send.sh
          echo 'if ! nc -z localhost 4444; then' >> ~/log_and_send.sh
          echo '  sshpass -p "${{ steps.parse_ssh.outputs.pass }}" ssh -o StrictHostKeyChecking=no -C -f -N -L 4444:localhost:4444 ${{ steps.parse_ssh.outputs.user }}@${{ steps.parse_ssh.outputs.host }}' >> ~/log_and_send.sh
          echo '  sleep 1' >> ~/log_and_send.sh
          echo 'fi' >> ~/log_and_send.sh
          echo 'tee >(nc -q 0 localhost 4444)' >> ~/log_and_send.sh
          chmod +x ~/log_and_send.sh

      - name: Send Initialized message
        run: |
          echo "Initialized" | ~/log_and_send.sh

      - name: Touch startTime file on remote host
        run: |
          sshpass -p "${{ steps.parse_ssh.outputs.pass }}" ssh -o StrictHostKeyChecking=no \
          ${{ steps.parse_ssh.outputs.user }}@${{ steps.parse_ssh.outputs.host }} \
          "touch ~/startTime" | ~/log_and_send.sh

      - name: Decrypt release.keystore.gpg
        run: |
          echo ">>> Decrypting release.keystore.gpg..." | ~/log_and_send.sh
          gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.DECODE_KEY }}" \
          --output release.keystore release.keystore.gpg
          cp release.keystore app/release.keystore

      - name: Write local.properties
        run: |
          echo ">>> Writing local.properties..." | ~/log_and_send.sh
          cat <<EOF > local.properties
          sdk.dir=/usr/local/lib/android/sdk
          BUNDLE_STORE_FILE=release.keystore
          BUNDLE_KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          BUNDLE_KEY_PASSWD=${{ secrets.KEY_PASS }}
          BUNDLE_STORE_PASSWD=${{ secrets.KEY_PASS }}
          EOF

      - name: Get KTOR commit hash
        id: ktor_hash
        run: |
          echo "Fetching latest ktor commit hash..." | ~/log_and_send.sh
          git ls-remote https://github.com/pyamsoft/ktor.git refs/heads/pyamsoft-3.1.3 | cut -f1 > ktor_commit.txt
          echo "ktor-commit=$(cat ktor_commit.txt)" >> $GITHUB_OUTPUT

      - name: Restore KTOR Maven Cache
        id: ktor_restore
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ktor-maven-${{ steps.ktor_hash.outputs.ktor-commit }}
          restore-keys: |
            ktor-maven-

      - name: Clone KTOR repository
        if: steps.ktor_restore.outputs.cache-hit != 'true'
        run: |
          echo "Cloning KTOR repository..." | ~/log_and_send.sh
          git clone --branch pyamsoft-3.1.3 https://github.com/pyamsoft/ktor.git ktor-source | ~/log_and_send.sh

      - name: Build and publish KTOR packages to local Maven repository
        if: steps.ktor_restore.outputs.cache-hit != 'true'
        working-directory: ktor-source
        run: |
          echo "Building and publishing KTOR packages..." | ~/log_and_send.sh
          ./gradlew publishKotlinMultiplatformPublicationToMavenLocal -U --info | ~/log_and_send.sh
          sleep 3
          ./gradlew publishJvmPublicationToMavenLocal -U --info | ~/log_and_send.sh

      - name: Save KTOR Maven Cache
        if: steps.ktor_restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.m2/repository
          key: ktor-maven-${{ steps.ktor_hash.outputs.ktor-commit }}

      - name: Verify KTOR packages in local Maven repository
        run: |
          echo "Verifying KTOR packages in local Maven repository..." | ~/log_and_send.sh
          if [ ! -d "$HOME/.m2/repository" ]; then
            echo "Error: Maven repository not found!" | ~/log_and_send.sh
            exit 1
          fi
          echo "KTOR packages successfully published to local Maven repository." | ~/log_and_send.sh

      - name: Build APK and save full log
        run: |
          echo ">>> Building APK..." | ~/log_and_send.sh
          ./gradlew app:assembleGoogleRelease -Dorg.gradle.dependency.verification=off | ~/log_and_send.sh
          echo ">>> APK build completed." | ~/log_and_send.sh

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: app/build/outputs/apk/**/*.apk

      - name: Upload reports folder to NTFY server
        if: always() && ${{ !env.ACT }}
        run: |
          echo ">>> Uploading reports folder..." | ~/log_and_send.sh
          REPORTS_FOLDER="/home/runner/work/tetherfi/tetherfi/build/reports/"
          if [ -d "$REPORTS_FOLDER" ]; then
            cd "$REPORTS_FOLDER"
            zip -r reports.zip .
            du -sh reports.zip | ~/log_and_send.sh
            curl -X POST -H "Authorization: Bearer ${{ secrets.NTFY_TOKEN }}" \
            -H "Title: Reports Folder" \
            -H "Tags: reports,upload" \
            -H "Filename: reports.zip" \
            --data-binary @reports.zip ${{ secrets.NTFY_URL }}
          else
            echo "No reports folder found." | ~/log_and_send.sh
          fi

      - name: Send APK to NTFY server
        if: always() && ${{ !env.ACT }}
        run: |
          echo ">>> Uploading APK..." | ~/log_and_send.sh
          APK_PATH=$(find app/build/outputs/apk/ -name "*.apk" | head -n 1)
          echo ">>> APK path: $APK_PATH" | ~/log_and_send.sh
            if [ -f "$APK_PATH" ]; then
            cd "$(dirname "$APK_PATH")"
            $APK_NAME=$(basename "$APK_PATH")
            echo ">>> APK name: $APK_NAME" | ~/log_and_send.sh
            du -sh "$APK_NAME" | ~/log_and_send.sh
            curl -X POST \
              -H "Authorization: Bearer ${{ secrets.NTFY_TOKEN }}" \
              -H "Title: APK File" \
              -H "Tags: apk,upload" \
              -H "Filename: $APK_NAME" \
              --data-binary @"$APK_NAME" ${{ secrets.NTFY_URL }}
          else
            echo "No APK file found." | ~/log_and_send.sh
          fi

      - name: Tell server action is done
        if: always()
        run: |
          echo ">>> Action is complete...\n\n\n\n\n\n\n\n\n\n\n" | ~/log_and_send.sh
